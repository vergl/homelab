---
- name: postgresql demo
  hosts: all
  become: true
  vars:
    postgresql_version: "14"
    postgresql_bin_path: "/usr/lib/postgresql/{{ postgresql_version }}/bin"
    postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
    postgresql_conf_file: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    pg_hba_file: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    ansible_ssh_pipelining: true
  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2
        state: present

    - name: Check if PostgreSQL is initialized
      ansible.builtin.stat:
        path: "{{ postgresql_data_dir }}/pg_hba.conf"
      register: postgres_data

    - name: Empty data dir
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}"
        state: absent
      when: not postgres_data.stat.exists

    - name: Initialize PostgreSQL
      ansible.builtin.shell: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
      become: true
      become_user: root
      when: not postgres_data.stat.exists
    
    - name: Replace postgresql configuration file to allow remote connection
      ansible.builtin.lineinfile:
        path: "{{ postgresql_conf_file }}"
        line: '{{ item }}'
        owner: postgres
        group: postgres
        mode: '0644'
      with_items:
        - "listen_addresses = '*'"
        - "port = 5432"
      become: true
      become_user: postgres
    
    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "{{ pg_hba_file }}"
        contype: host
        databases: all
        source: "192.168.0.0/24"
        method: md5
        users: "all"
        create: true
      become: true
      become_user: postgres

    - name: Start and enable service
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: true
      become: true
      become_user: root
        
    - name: "Create db user for ssh connection"
      postgresql_user:
        state: present
        name: stanislavgiley
      become: yes
      become_user: postgres

    - name: "Create postgresql user for remote connection"
      postgresql_user:
        user: vergl
        password: '{{ lookup("env", "POSTGRESQL_USER_PASSWORD") }}'
        role_attr_flags: "CREATEDB,NOSUPERUSER"
      become: true
      become_user: postgres